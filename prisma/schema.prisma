// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String?
    email         String   @unique
    password      String
    userType      String   @default("buyer")
    sessions      Session[]
    seller        product[]
    buyer         order[]
    reviews       Review[]
}

model orderProduct {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    productName String @default("replacedporudct")
    productPrice String @default("0")
    order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    products  product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    quantity  Int?
    @@unique([orderId, productId])
}

model productImage{
    id           String    @id @default(cuid())
    imageUrl     String
    productId    String
    product    product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model product{
    id           String    @id @default(cuid())
    name         String
    sellerId     String  
    sellerName   String 
    category     String
    description  String
    price        Float?
    stripeProductId String?   
    stripePriceId   String?   
    approve      Boolean   @default(false)
    createddate  DateTime @default(now())
    seller       User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    images       productImage []
    order        orderProduct[]
    review       Review[]
}

model order{
    id           String @id @default(cuid())
    paidStatus   Boolean
    buyerId      String
    buyerName    String?
    buyer        User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
    products     orderProduct[] 
    billingInfo  BillingInfo? 
    status       String?
    createdDate  DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BillingInfo{
    id           String @id @default(cuid())
    orderId   String @unique
    order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    billingAddress String
    billingPhone   String
    billingEmail   String
}

model Review {
    id           String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId String
    product  product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    rating String
    comments String
}

